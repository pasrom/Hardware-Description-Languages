// -------------------------------------------------------------
// 
// File Name: hdlsrc/deltasigma_code_gen/ds_dac_sI.v
// Created: 2018-01-12 13:25:24
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2e-08
// Target subsystem base rate: 2e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// dout                          ce_out        2e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ds_dac_sI
// Source Path: deltasigma_code_gen/ds_dac_sI
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ds_dac_sI
          (clk50m,
           rst_n,
           clk_enable,
           din,
           ce_out,
           dout);


  input   clk50m;
  input   rst_n;
  input   clk_enable;
  input   [15:0] din;  // uint16
  output  ce_out;
  output  dout;

  wire enb;
  wire signed [17:0] mid_range_out1;  // sfix18
  wire alpha1_bit_DAC_relop1;
  wire dout_1;
  wire [15:0] fdbk;  // uint16
  wire signed [16:0] Sum1_1;  // sfix17
  wire signed [16:0] Sum1_2;  // sfix17
  wire signed [16:0] delta;  // sfix17
  reg signed [17:0] integ;  // sfix18
  wire signed [17:0] Sum2_1;  // sfix18
  wire signed [17:0] integ_add;  // sfix18

  // 1 bit DAC
  // 
  // Integrator


  assign enb = clk_enable;

  assign mid_range_out1 = 18'sb001000000000000000;



  assign dout_1 = alpha1_bit_DAC_relop1;

  assign fdbk = (dout_1 == 1'b1 ? 16'b1111111111111111 :
              16'b0000000000000000);



  assign Sum1_1 = {1'b0, din};
  assign Sum1_2 = {1'b0, fdbk};
  assign delta = Sum1_1 - Sum1_2;



  assign Sum2_1 = {delta[16], delta};
  assign integ_add = Sum2_1 + integ;



  always @(posedge clk50m or negedge rst_n)
    begin : Unit_Delay_process
      if (rst_n == 1'b0) begin
        integ <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          integ <= integ_add;
        end
      end
    end



  assign alpha1_bit_DAC_relop1 = integ >= mid_range_out1;



  assign dout = alpha1_bit_DAC_relop1;

  assign ce_out = clk_enable;

endmodule  // ds_dac_sI

